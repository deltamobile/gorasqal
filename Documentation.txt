PACKAGE DOCUMENTATION

package gorasqal
    import "github.com/deltamobile/gorasqal"

    Rasqal bindings for Go. Written by William Waites in 2011.

    SPARQL and related RDF query language bindings and utilities.

    These are minimal and reflect only the parts of rasqal that I need at
    the moment. Contributions to make it more complete are more than
    welcome.


FUNCTIONS

func GoRasqal_log_handler(user_data unsafe.Pointer, messagep unsafe.Pointer)
    export GoRasqal_log_handler

func QueryPrint(query string)


TYPES

type Query struct {
    // contains filtered or unexported fields
}


func NewQuery(w *World) *Query


func (q *Query) Free()

func (q *Query) Prepare(query string) (err error)

func (q *Query) Print()


type Service struct {
    // contains filtered or unexported fields
}
    The rasqal service enables queries against remote SPARQL endpoints. It
    is a one-off construct, used to execute a single query.


func NewService(world *World, endpoint string, query string) *Service


func (s *Service) Execute(data ...interface{}) (err error)
    Perform the operation as a query and return a set of results. This is
    usually used for SPARUL INSERT/DELETE queries. If the Service was
    created as using a template, data contains the fields to be filled in.

func (s *Service) Free()

func (s *Service) Query(data ...interface{}) (results []map[string]goraptor.Term, err error)
    Perform the operation as a query and return a set of results. If the
    Service was created as using a template, data contains the fields to be
    filled in.

func (s *Service) SetFormat(format string)

func (s *Service) SetProxy(proxy string)

func (s *Service) SetUserAgent(user_agent string)


type World struct {
    // contains filtered or unexported fields
}


func NewWorld() (w *World)


func (w *World) Free()



